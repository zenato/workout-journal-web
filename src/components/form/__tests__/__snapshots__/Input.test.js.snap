// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render wrapped input field 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="item"
  >
    <label>
      test
    </label>
    <div
      className="field"
    >
      <input
        className="form-control"
        name="test"
        placeholder="test"
        type="text"
        value="test"
      />
      <span
        className="error"
      >
        test
      </span>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="item"
    >
      <label>
        test
      </label>
      <div
        className="field"
      >
        <input
          className="form-control"
          name="test"
          placeholder="test"
          type="text"
          value="test"
        />
        <span
          className="error"
        >
          test
        </span>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Input
        input={
          Object {
            "name": "test",
            "value": "test",
          }
        }
        label="test"
        meta={
          Object {
            "error": "test",
            "touched": true,
          }
        }
        type="text"
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "input": Object {
            "name": "test",
            "value": "test",
          },
          "label": "test",
          "meta": Object {
            "error": "test",
            "touched": true,
          },
          "type": "text",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="item"
        >
          <label>
            test
          </label>
          <div
            className="field"
          >
            <input
              className="form-control"
              name="test"
              placeholder="test"
              type="text"
              value="test"
            />
            <span
              className="error"
            >
              test
            </span>
          </div>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="item"
        >
          <label>
            test
          </label>
          <div
            className="field"
          >
            <input
              className="form-control"
              name="test"
              placeholder="test"
              type="text"
              value="test"
            />
            <span
              className="error"
            >
              test
            </span>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Input
    input={
      Object {
        "name": "test",
        "value": "test",
      }
    }
    label="test"
    meta={
      Object {
        "error": "test",
        "touched": true,
      }
    }
    type="text"
  />,
}
`;
